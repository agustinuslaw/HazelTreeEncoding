
 ----- Create Data ----- 

TestTreeTableManager.dropTable:HazelTree
	drop table if exists dbo.HazelTree
TestTreeTableManager.createTestTable:HazelTree
	create table HazelTree (
	name nvarchar(150) primary key, 
	parent nvarchar(150), 
	number int not null, 
	e11 bigint not null,
	e21 bigint not null,
	e12 bigint not null,
	e22 bigint not null
);
TestTreeTableManager.generateAndInsertBinaryTrees(HazelTree, 2000000)
PrimeTreeBuilder.buildBinariesAsSet(2->500000) started
PrimeTreeBuilder.buildBinariesAsSet(2->500000) took 69526 ms
TestTreeTableManager.bulkInsert(HazelTree) started
bulkInsert() took 17444 ms
PrimeTreeBuilder.buildBinariesAsSet(500000->1000000) started
PrimeTreeBuilder.buildBinariesAsSet(500000->1000000) took 79358 ms
TestTreeTableManager.bulkInsert(HazelTree) started
bulkInsert() took 26948 ms
PrimeTreeBuilder.buildBinariesAsSet(1000000->1500000) started
PrimeTreeBuilder.buildBinariesAsSet(1000000->1500000) took 70009 ms
TestTreeTableManager.bulkInsert(HazelTree) started
bulkInsert() took 28978 ms
PrimeTreeBuilder.buildBinariesAsSet(1500000->2000000) started
PrimeTreeBuilder.buildBinariesAsSet(1500000->2000000) took 91868 ms
TestTreeTableManager.bulkInsert(HazelTree) started
bulkInsert() took 31077 ms
added 12709542 rows with total: 12709542
TestTreeTableManager.createBoundIndexesForTestTable:HazelTree
	alter table HazelTree add lower_bound as e11*1.0/e21 persisted;	alter table HazelTree add upper_bound as e12*1.0/e22 persisted;
createBoundIndexesForTestTable() took 164280 ms

 ----- Statistics ----- 

TestTreeTableManager.getRowCount(HazelTree)
Trees: 2000000
Query: 524288
Table Rows: 12709542

 ----- Selection Comparison ----- 

TestTreeTableManager.dropBoundIndexes:HazelTree
	drop index if exists idx_hazeltree_lower on dbo.HazelTree;
	drop index if exists idx_hazeltree_upper on dbo.HazelTree;
TestTreeTableManager.selectMatrices:HazelTree for:524288
	select child.*
	from HazelTree child, HazelTree node   
	where node.e11*child.e21 <= child.e11*node.e21
	and child.e12*node.e22 <= node.e12*child.e22 
	and node.name = '524288'  -- predicate uniquely identifying a node 
SQLServerResultSet:12
Query took: 6362 milliseconds. 

TestTreeTableManager.selectMatricesWithPrefilter:HazelTree for:524288
	select child.*
	from HazelTree child, HazelTree node 
	-- approximate 
	where child.e11/child.e21  
	between node.e11/node.e21 and node.e12/node.e22
	-- exact
	and node.e11*child.e21 <= child.e11*node.e21 
	and child.e12*node.e22 <= node.e12*child.e22 
	-- predicate uniquely identifying a node 
	and node.name = '524288';
SQLServerResultSet:13
Query took: 6177 milliseconds. 

TestTreeTableManager.createBoundIndexesForTestTable:HazelTree
	create nonclustered index idx_hazeltree_lower on HazelTree (lower_bound asc);	create nonclustered index idx_hazeltree_upper on HazelTree (upper_bound asc);
createBoundIndexesForTestTable() took 64795 ms
TestTreeTableManager.selectMatricesWithIndexedColumn(String, String):HazelTree for:524288
	select child.*
	from HazelTree child, HazelTree node 
	-- approximate for indexing
	where child.lower_bound
	between node.lower_bound and node.upper_bound
	-- exact
	and node.e11*child.e21 <= child.e11*node.e21 
	and child.e12*node.e22 <= node.e12*child.e22 
	-- predicate uniquely identifying a node 
	and node.name = '524288';
SQLServerResultSet:14
Query took: 163 milliseconds. 

TestTreeTableManager.selectCteRecursive:HazelTree for:524288
	with _CTE (name, parent, number, e11, e21, e12, e22, depth)
	as	(	
	select name, parent, number, e11, e21, e12, e22, 1 from HazelTree 
	where name = '524288'  -- predicate uniquely identifying a node as root
		
	union all
	select child.name, child.parent, child.number, child.e11, child.e21, child.e12, child.e22, cte.depth+1 from _CTE cte
	inner join HazelTree child on (cte.name = child.parent)
	)
	select name, number, depth 
	from _CTE 
	option(MAXRECURSION 50);
SQLServerResultSet:15
Query took: 52500 milliseconds. 


 ----- Tree ----- 

Queried Tree for name:524288
524288.262144.131072.65536.32768
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128.2
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128.64.32.16.8.4.2
524288.262144.131072.65536.32768.16384.8192.4096.2048.2
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.2
524288.262144.131072.65536.32768.16384.8192
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128
524288
524288.262144.131072.65536.32768.16384.2
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.2
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128.64.32.2
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128.64.32.16.2
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128.64.32.16.8.4.2a
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128.64.32.16.8.4
524288.262144.131072.65536.2
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128.64.32.16.8.2
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128.64.32.16.8
524288.262144.2
524288.262144.131072.65536.32768.16384.8192.4096.2048
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.2
524288.262144.131072.65536.32768.16384.8192.4096
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128.64
524288.262144
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128.64.32
524288.262144.131072.65536.32768.2
524288.262144.131072.65536.32768.16384.8192.2
524288.262144.131072.2
524288.262144.131072.65536.32768.16384.8192.4096.2
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128.64.2
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256.128.64.32.16
524288.262144.131072.65536.32768.16384
524288.2
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024
524288.262144.131072.65536
524288.262144.131072.65536.32768.16384.8192.4096.2048.1024.512.256
524288.262144.131072
